package org.netbeans.modules.jeeserver.base.embedded.project.web;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.util.Set;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;
import org.netbeans.api.j2ee.core.Profile;
import org.netbeans.modules.jeeserver.base.embedded.utils.EmbConstants;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;
import org.openide.filesystems.FileUtil;

public class EmbWebAppTemplatePanelVisual extends JPanel implements DocumentListener, ItemListener { //, ActionListener {

    public static final String PROP_PROJECT_NAME = "projectName";
    private EmbWebAppTemplateWizardPanel panel;
    private boolean prohibitChangeContextPath;

    public EmbWebAppTemplatePanelVisual(EmbWebAppTemplateWizardPanel panel) {
        initComponents();
        this.panel = panel;
        addListeners();
    }

    private void addListeners() {
        projectNameTextField.getDocument().addDocumentListener(this);
        contextPathTextField.getDocument().addDocumentListener(this);
        javaEEVersionComboBox.addItemListener(this);
    }

    public String getProjectName() {
        return this.projectNameTextField.getText();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        projectNameLabel = new javax.swing.JLabel();
        projectNameTextField = new javax.swing.JTextField();
        createdFolderLabel = new javax.swing.JLabel();
        createdFolderTextField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        javaEEVersionLabel = new javax.swing.JLabel();
        contextPathLabel = new javax.swing.JLabel();
        contextPathTextField = new javax.swing.JTextField();
        javaEEVersionComboBox = new javax.swing.JComboBox();

        projectNameLabel.setLabelFor(projectNameTextField);
        org.openide.awt.Mnemonics.setLocalizedText(projectNameLabel, "Project Name:"); // NOI18N

        createdFolderLabel.setLabelFor(createdFolderTextField);
        org.openide.awt.Mnemonics.setLocalizedText(createdFolderLabel, "Created Folder:"); // NOI18N

        createdFolderTextField.setEditable(false);

        org.openide.awt.Mnemonics.setLocalizedText(javaEEVersionLabel, "Java JEE Version:"); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(contextPathLabel, "Context Path:"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(javaEEVersionLabel)
                            .addComponent(contextPathLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(contextPathTextField)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(javaEEVersionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(projectNameLabel)
                            .addComponent(createdFolderLabel))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(projectNameTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                            .addComponent(createdFolderTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE))))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectNameLabel)
                    .addComponent(projectNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createdFolderLabel)
                    .addComponent(createdFolderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(javaEEVersionLabel)
                    .addComponent(javaEEVersionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contextPathLabel)
                    .addComponent(contextPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(128, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel contextPathLabel;
    private javax.swing.JTextField contextPathTextField;
    private javax.swing.JLabel createdFolderLabel;
    private javax.swing.JTextField createdFolderTextField;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox javaEEVersionComboBox;
    private javax.swing.JLabel javaEEVersionLabel;
    private javax.swing.JLabel projectNameLabel;
    private javax.swing.JTextField projectNameTextField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addNotify() {
        super.addNotify();
        //same problem as in 31086, initial focus on Cancel button
        projectNameTextField.requestFocus();
    }

    boolean valid(WizardDescriptor wiz) {
        String errorProp =  WizardDescriptor.PROP_ERROR_MESSAGE;
        if (projectNameTextField.getText().length() == 0) {
            // TODO if using org.openide.dialogs >= 7.8, can use WizardDescriptor.PROP_ERROR_MESSAGE:
            
            wiz.putProperty(errorProp,
                    "Project Name is not a valid folder name.");
            return false; // Display name not specified
        }
        
        if ( contextPathTextField.getText() == null || ! contextPathTextField.getText().startsWith("/")){
            wiz.putProperty(errorProp,
                        "Invalid Context Path value.");
            return false;
        }
        final File destFolder = FileUtil.normalizeFile(new File((String) wiz.getProperty("rootPath") + "/" + projectNameTextField.getText()));
        File projLoc = destFolder;
        while (projLoc != null && !projLoc.exists()) {
            projLoc = projLoc.getParentFile();
        }
        if (projLoc == null || !projLoc.canWrite()) {
            wiz.putProperty(errorProp,
                    "Project Folder cannot be created.");
            return false;
        }

        if (FileUtil.toFileObject(projLoc) == null) {
            String message = "Project Folder is not a valid path.";
            wiz.putProperty(errorProp, message);
            return false;
        }

        File[] kids = destFolder.listFiles();
        if (destFolder.exists() && kids != null && kids.length > 0) {
            // Folder exists and is not empty
            wiz.putProperty(errorProp,
                    "Project Folder already exists and is not empty.");
            return false;
        }
        wiz.putProperty(errorProp, "");
        return true;
    }

    void store(WizardDescriptor wiz) {
        String name = projectNameTextField.getText().trim();

        wiz.putProperty("name", name);
        wiz.putProperty(EmbConstants.CONTEXTPATH_PROP, contextPathTextField.getText());
        wiz.putProperty("jeeProfile", javaEEVersionComboBox.getSelectedItem());

    }

    void read(WizardDescriptor wiz) {

        String projectName = (String) wiz.getProperty("name");
        if (projectName == null) {
            projectName = "WebApp";
        }

        this.projectNameTextField.setText(projectName);
        this.projectNameTextField.selectAll();

        String str = (String) wiz.getProperty("rootPath");
        str = FileUtil.normalizePath(str + File.separatorChar + projectName);
        this.createdFolderTextField.setText(str);

        str = (String) wiz.getProperty("jeeProfile");
        if (str == null) {
            Set<Profile> jeeProfiles = (Set<Profile>) wiz.getProperty("jeeProfiles");
            for (Profile p : jeeProfiles) {
                str = p.getDisplayName();
                this.javaEEVersionComboBox.addItem(str);
            }
        }
        this.javaEEVersionComboBox.setSelectedItem(str);

        str = (String) wiz.getProperty(EmbConstants.CONTEXTPATH_PROP);
        if (str == null) {
            str = "/" + projectName;
        }
        this.contextPathTextField.setText(str);

    }

    void validate(WizardDescriptor wiz) throws WizardValidationException {
        // nothing to validate
    }

    // Implementation of DocumentListener --------------------------------------
    @Override
    public void changedUpdate(DocumentEvent e) {
        updateTexts(e);
        if (this.projectNameTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_PROJECT_NAME, null, this.projectNameTextField.getText());
        }
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        updateTexts(e);
        if (this.projectNameTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_PROJECT_NAME, null, this.projectNameTextField.getText());
        }
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        updateTexts(e);
        if (this.projectNameTextField.getDocument() == e.getDocument()) {
            firePropertyChange(PROP_PROJECT_NAME, null, this.projectNameTextField.getText());
        }
    }

    /**
     * Handles changes in the Project name and project directory,
     */
    private void updateTexts(DocumentEvent e) {

        Document doc = e.getDocument();

        if (doc == projectNameTextField.getDocument()) {
            // Change in the project name

            String projectName = projectNameTextField.getText();
            
            String str = (String) panel.getWizardDescriptor().getProperty("rootPath");
            str = FileUtil.normalizePath(str + File.separatorChar + projectName);            
            this.createdFolderTextField.setText(str);

            if (!prohibitChangeContextPath) {
                this.contextPathTextField.setText("/" + projectName);
            }

        } else if (doc == contextPathTextField.getDocument() && contextPathTextField.hasFocus()) {
            prohibitChangeContextPath = true;
        }

        panel.fireChangeEvent(); // Notify that the panel changed
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        firePropertyChange(PROP_PROJECT_NAME, null, javaEEVersionComboBox.getSelectedItem());
    }
}
